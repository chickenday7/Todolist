{"version":3,"sources":["component/Todolist.module.scss","component/AddItemForm/AddItemFormStyle.module.scss","component/AddItemForm/ChangeNameForm.tsx","component/ListTasks/ListTasks.tsx","component/AddItemForm/AddItemForm.tsx","component/TodoList.tsx","App.tsx","serviceWorker.ts","state/todolist-reducer.ts","index.tsx"],"names":["module","exports","ChangeNameForm","props","useState","name","setName","value","onChange","e","currentTarget","onBlur","callback","setChangeMode","onKeyPress","key","ListTasksMap","changeMod","tasks","id","type","checked","isDone","onClick","switchDone","todolistID","title","text","renameTask","deleteTasks","useStyles","makeStyles","theme","createStyles","plus","color","cursor","position","right","bottom","input","width","padding","AddItemForm","addSymbol","symbol","classes","className","s","wrapperTask","TextField","label","delete","height","TodoList","listTasks","map","elem","ListTasks","onSetFilter","changeFilter","wrapperTodo","renameTodolist","titleTodo","removeTodolist","addTask","App","todolistID1","uuid_v4","todolistID2","filter","todoList","setTodoList","setTasks","useEffect","prevTasks","localStorage","getItem","prevTodoList","JSON","parse","setItem","stringify","newArrayTodolists","item","keyTodolis","newTodolist","keyTodolist","taskID","task","filterValue","newTodoList","AllTodoLists","filteredTasks","titleTodoList","idNewTodo","Boolean","window","location","hostname","match","initialState","todo","store","createStore","state","action","nameTask","newName","todoListID","el","taskTitle","valueDone","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4fbb295.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"Todolist_buttonDelete__321Uk\",\"titleTodo\":\"Todolist_titleTodo__2H_ug\",\"wrapperTodo\":\"Todolist_wrapperTodo__D-gDA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperTask\":\"AddItemFormStyle_wrapperTask__1ocJt\"};","import React, {Dispatch, SetStateAction, useState} from \"react\";\n\n\n\ntype ChangeNameFormType = {\n    callback:(titleName:string)=>void\n    setChangeMode:Dispatch<SetStateAction<boolean>>\n    name:string\n}\nexport const ChangeNameForm = (props:ChangeNameFormType) => {\n    let [name,setName] = useState<string>(props.name)\n    const onSpanModeKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.key === 'Enter' && props.callback(name)\n        e.key === 'Enter' && props.setChangeMode(false)\n    }\n    const onSpanModeBlur = () => {\n        props.callback(name)\n        props.setChangeMode(false)\n    }\n    const onChangeName = (e:React.ChangeEvent<HTMLInputElement>) => {\n      setName(e.currentTarget.value)\n    }\n    return <input value={name}\n                  onChange={onChangeName}\n                  onBlur={onSpanModeBlur}\n                  onKeyPress={onSpanModeKey}\n    />\n}","import React, {useState} from \"react\";\nimport {TasksType} from \"../../App\";\nimport {ChangeNameForm} from \"../AddItemForm/ChangeNameForm\";\n\n\ntype ListTasks = {\n    todolistID:string\n    tasks: TasksType\n    deleteTasks: (keyTask:string,taskID:string) => void\n    switchDone: (keyTask:string, taskID:string, done:boolean) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\n\nconst ListTasksMap = (props: ListTasks) => {\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n    const onDeleteTask = () => {\n        props.deleteTasks(props.todolistID,props.tasks.id)\n    }\n    const onSwitchDone = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n        props.switchDone(props.todolistID, props.tasks.id, e.currentTarget.checked)\n    }\n    const renameTask = (text:string) => {\n        props.renameTask(props.todolistID,props.tasks.id,text)\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n\n    return (\n        <li key={props.tasks.id}>\n            <input type=\"checkbox\" checked={props.tasks.isDone} onClick={onSwitchDone}/>\n            {changeMod\n                ? <ChangeNameForm name={props.tasks.title} callback={renameTask} setChangeMode={setChangeMode} />\n                : <span onClick={onInputMode}>{props.tasks.title}</span>\n            }\n            <button onClick={onDeleteTask}>x\n            </button>\n        </li>\n    )\n}\n\nexport default ListTasksMap","import React, {ChangeEvent, useState} from \"react\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport s from './AddItemFormStyle.module.scss'\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\n\n\ntype AddItemFormType = {\n    callback: (text: string) => void\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        plus:{\n            color:'black',\n            cursor:'pointer',\n            position:'absolute',\n            right:'0',\n            bottom:'3px',\n            '&:hover': {\n                color:'#2d97e7'\n            }\n        },\n        input:{\n            width:'250px',\n            padding: '12,5px',\n            'input':{\n                padding:'11,5px 14px'\n            }\n        }\n    }),\n)\n\nexport const AddItemForm = (props: AddItemFormType) => {\n\n    let [name, setName] = useState<string>('')\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        addSymbol(e.currentTarget.value)\n    }\n    const onAddItemButton = () => {\n        props.callback(name)\n        setName('')\n    }\n    const addSymbol = (symbol: string) => {\n        setName(symbol)\n    }\n    const onAddItemKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter'){\n            setName('')\n        }\n        e.key === 'Enter' && props.callback(name)\n\n    }\n    const classes = useStyles()\n    return (\n        <div className={s.wrapperTask}>\n            <TextField onKeyPress={onAddItemKey} onChange={onChangeInput} value={name} label={'Add Task'}/>\n            <AddCircleIcon className={classes.plus}  onClick={onAddItemButton}/>\n        </div>\n    )\n}","import React, {MouseEvent, ReactNode, useState} from \"react\";\nimport {filterValuesType, TasksType} from \"../App\";\nimport ListTasksMap from \"./ListTasks/ListTasks\";\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\nimport {ChangeNameForm} from \"./AddItemForm/ChangeNameForm\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport s from './Todolist.module.scss'\n\ntype TodoListProps = {\n    todolistID: string\n    title: string\n    tasks: Array<TasksType>\n    deleteTasks: (keyTask: string, taskID: string) => void\n    changeFilter: (filterValue: filterValuesType, todolistID: string) => void\n    addTask: (text: string, keyTask: string) => void\n    switchDone: (keyTask: string, taskID: string, done: boolean) => void\n    removeTodolist: (todolistID: string) => void\n    renameTodolist: (text: string, keyTodolist: string) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        delete: {\n            width:'25px',\n            height:'25px',\n            cursor:'pointer',\n            '&:hover':{\n                color:'red'\n            }\n        },\n    }),\n)\n\nconst TodoList = (props: TodoListProps) => {\n\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n\n    let listTasks: ReactNode = props.tasks.map((elem) => <ListTasksMap tasks={elem}\n                                                                       todolistID={props.todolistID}\n                                                                       key={elem.id}\n                                                                       deleteTasks={props.deleteTasks}\n                                                                       switchDone={props.switchDone}\n                                                                       renameTask={props.renameTask}\n    />)\n    const onSetFilter = (e: MouseEvent<HTMLButtonElement>) => {\n        props.changeFilter(e.currentTarget.name as filterValuesType, props.todolistID)\n    }\n    const onRemoveTodolist = () => {\n        props.removeTodolist(props.todolistID)\n    }\n    const addTask = (text: string) => {\n        props.addTask(text, props.todolistID)\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n    const renameTask = (text: string) => {\n        props.renameTodolist(text, props.todolistID)\n    }\n    const classes = useStyles();\n    return (\n        <div className={s.wrapperTodo}>\n            {changeMod\n                ? <ChangeNameForm name={props.title} setChangeMode={setChangeMode} callback={renameTask}/>\n                : <h3 className={s.titleTodo} onClick={onInputMode}>{props.title}\n                    <DeleteIcon onClick={onRemoveTodolist} className={classes.delete}/>\n                </h3>\n            }\n            <AddItemForm callback={addTask}/>\n            <ul>\n                {listTasks}\n            </ul>\n            <div>\n                <button name={'all'} onClick={onSetFilter}>All</button>\n                <button name={'active'} onClick={onSetFilter}>Active</button>\n                <button name={'completed'} onClick={onSetFilter}>Completed</button>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport TodoList from \"./component/TodoList\";\nimport {v4 as uuid_v4} from \"uuid\";\nimport {AddItemForm} from \"./component/AddItemForm/AddItemForm\";\n\nimport {Button} from \"@material-ui/core\";\n\n\nexport type filterValuesType = 'all' | 'completed' | 'active'\n\nexport type TasksType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    let todolistID1: string = uuid_v4()\n    let todolistID2: string = uuid_v4()\n\n    type TodoListType = Array<{ id: string, title: string, filter: filterValuesType }>\n    let [todoList, setTodoList] = useState<TodoListType>([\n        {id: todolistID1, title: 'What to learn?', filter: 'all'},\n        {id: todolistID2, title: 'What to buy?', filter: 'all'},\n    ])\n\n    let [tasks, setTasks] = useState({\n            [todolistID1]: [\n                {id: uuid_v4(), title: 'React', isDone: true},\n                {id: uuid_v4(), title: 'JS', isDone: false},\n                {id: uuid_v4(), title: 'HTML', isDone: true},\n                {id: uuid_v4(), title: 'CSS', isDone: true},\n            ],\n            [todolistID2]: [\n                {id: uuid_v4(), title: 'Milk', isDone: true},\n                {id: uuid_v4(), title: 'Bread', isDone: false},\n                {id: uuid_v4(), title: 'Egg', isDone: true},\n                {id: uuid_v4(), title: 'Chocolate', isDone: true},]\n        }\n    )\n\n    useEffect(() => {\n        let prevTasks = localStorage.getItem('tasks')\n        let prevTodoList = localStorage.getItem('todolist')\n        if (prevTasks) {\n            setTasks(JSON.parse(prevTasks))\n        }\n        if (prevTodoList) {\n            setTodoList(JSON.parse(prevTodoList))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n        localStorage.setItem('todolist', JSON.stringify(todoList))\n    }, [tasks, todoList])\n\n\n    let addTodoList = (titleTodoList: string) => {\n        let idNewTodo = uuid_v4()\n        setTodoList([{id: idNewTodo, title: titleTodoList, filter: 'all'}, ...todoList])\n        tasks[idNewTodo] = []\n        setTasks({...tasks})\n    }\n    let removeTodolist = (todolistID: string) => {\n        let newArrayTodolists = todoList.filter(item => item.id !== todolistID)\n        setTodoList(newArrayTodolists)\n        delete tasks[todolistID]\n        setTasks({...tasks})\n    }\n    let renameTodolist = (text: string, keyTodolis: string): void => {\n        let newTodolist = todoList.map(item => item.id === keyTodolis ? {...item, title: text} : item)\n        setTodoList(newTodolist)\n    }\n    let deleteTasks = (keyTodolist: string, taskID: string): void => {\n        tasks[keyTodolist] = tasks[keyTodolist].filter(task => task.id !== taskID)\n        setTasks({...tasks})\n    }\n    let addTask = (text: string, keyTodolist: string): void => {\n        tasks[keyTodolist] = [...tasks[keyTodolist], {id: uuid_v4(), title: text, isDone: false}]\n        setTasks({...tasks})\n    }\n    let renameTask = (todolistID:string,taskID:string,text:string)=>{\n        tasks[todolistID] = tasks[todolistID].map(task => task.id === taskID ? {...task,title:text}:task)\n        setTasks({...tasks})\n    }\n    let switchDone = (keyTodolist: string, taskID: string, isDone: boolean) => {\n        tasks[keyTodolist] = tasks[keyTodolist].map(task => task.id === taskID ? {...task, isDone} : task)\n        setTasks({...tasks})\n    }\n    let changeFilter = (filterValue: filterValuesType, todolistID: string) => {\n        let newTodoList = todoList.map(item => item.id === todolistID ? {...item, filter: filterValue} : item)\n        setTodoList(newTodoList)\n    }\n\n\n    let AllTodoLists = todoList.map((item) => {\n        let filteredTasks = tasks[item.id]\n        if (item.filter === 'completed') {\n            filteredTasks = filteredTasks.filter((task: any) => task.isDone)\n        }\n        if (item.filter === 'active') {\n            filteredTasks = filteredTasks.filter((task: any) => !task.isDone)\n        }\n\n\n        return <TodoList\n            key={item.id}\n            todolistID={item.id}\n            title={item.title}\n            tasks={filteredTasks}\n            deleteTasks={deleteTasks}\n            changeFilter={changeFilter}\n            addTask={addTask}\n            switchDone={switchDone}\n            removeTodolist={removeTodolist}\n            renameTodolist={renameTodolist}\n            renameTask={renameTask}\n        />\n    })\n\n    return (\n        <div className=\"App\">\n            <div>\n                <AddItemForm callback={addTodoList}/>\n            </div>\n            {AllTodoLists}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\nimport {v4 as uuid_v4} from \"uuid\";\nimport {filterValuesType} from \"../App\";\n\nconst ADD_TODO = 'ADD_TODO'\nconst REMOVE_TODO = 'REMOVE_TODO'\nconst RENAME_TODO = 'RENAME_TODO'\nconst DELETE_TASK = 'DELETE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst RENAME_TASK = 'RENAME_TASK'\nconst CHANGE_DONE = 'CHANGE_DONE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\n\n\nlet todolistID1 = uuid_v4()\nlet todolistID2 = uuid_v4()\n\nexport type StateType = {\n    todo: { id: string, title: string, filter: filterValuesType }[]\n    tasks: {\n        [key: string]: { id: string, title: string, isDone: boolean }[]\n    }\n}\n\nconst initialState: StateType = {\n    todo: [\n        {id: todolistID1, title: 'What to learn?', filter: 'all'},\n        {id: todolistID2, title: 'What to buy?', filter: 'all'},\n    ],\n    tasks: {\n        [todolistID1]: [\n            {id: uuid_v4(), title: 'React', isDone: true},\n            {id: uuid_v4(), title: 'JS', isDone: false},\n            {id: uuid_v4(), title: 'HTML', isDone: true},\n            {id: uuid_v4(), title: 'CSS', isDone: true},\n        ],\n        [todolistID2]: [\n            {id: uuid_v4(), title: 'Milk', isDone: true},\n            {id: uuid_v4(), title: 'Bread', isDone: false},\n            {id: uuid_v4(), title: 'Egg', isDone: true},\n            {id: uuid_v4(), title: 'Chocolate', isDone: true},]\n    }\n}\n\ntype ActionType = AddTodoACType |\n    RemoveTodoACType |\n    RenameTodoACType |\n    DeleteTaskACType |\n    AddTaskACType |\n    RenameTaskACType |\n    ChangeDoneTaskACType |\n    ChangeFilterTodoAC\n\nexport const todolistReducer = (state = initialState, action: ActionType): StateType => {\n    switch (action.type) {\n        case ADD_TODO:\n            let id = uuid_v4()\n            return {\n                ...state,\n                todo: [{id: id, title: action.nameTask, filter: 'all'}, ...state.todo],\n                tasks: {\n                    ...state.tasks,\n                    [id]: []\n                }\n            }\n        case RENAME_TODO:\n            return {\n                ...state,\n                todo: state.todo.map(elem => elem.id === action.id ? {...elem, title: action.newName} : elem)\n            }\n        case REMOVE_TODO:\n            delete state.tasks[action.id]\n            return {\n                ...state,\n                todo: state.todo.filter(elem => elem.id !== action.id),\n                tasks: {...state.tasks}\n            }\n        case DELETE_TASK:\n            state.tasks[action.todoListID] = state.tasks[action.todoListID].filter(el => el.id !== action.taskID)\n            return {\n                ...state\n            }\n        case ADD_TASK:\n            state.tasks[action.todolistID] = [{\n                id: uuid_v4(),\n                title: action.taskTitle,\n                isDone: false\n            }, ...state.tasks[action.todolistID]]\n            return {\n                ...state\n            }\n        case RENAME_TASK:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,title:action.newName} : el)\n            return {\n                ...state\n            }\n        case CHANGE_DONE:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,isDone:!action.valueDone} : el)\n            return {\n                ...state\n            }\n        case CHANGE_FILTER:\n            return {\n                ...state,\n                todo: state.todo.map(el => el.id === action.todolistID ? {...el, filter:action.filter}: el)\n            }\n        default:\n            return state\n\n    }\n}\n\n\ntype AddTodoACType = { type: typeof ADD_TODO, nameTask: string }\nexport const addTodoAC = (nameTask: string): AddTodoACType => {\n    return {\n        type: ADD_TODO,\n        nameTask\n    }\n}\n\ntype RemoveTodoACType = { type: typeof REMOVE_TODO, id: string }\nexport const removeTodoAC = (id: string): RemoveTodoACType => {\n    return {\n        type: REMOVE_TODO,\n        id\n    }\n}\n\ntype RenameTodoACType = { type: typeof RENAME_TODO, id: string, newName: string }\nexport const renameTodoAC = (id: string, newName: string): RenameTodoACType => {\n    return {\n        type: RENAME_TODO,\n        id,\n        newName\n    }\n}\ntype DeleteTaskACType = { type: typeof DELETE_TASK, todoListID: string, taskID: string }\nexport const deleteTaskAC = (todoListID: string, taskID: string): DeleteTaskACType => {\n    return {\n        type: DELETE_TASK,\n        todoListID,\n        taskID\n    }\n}\ntype AddTaskACType = { type: typeof ADD_TASK, todolistID: string, taskTitle: string }\nexport const addTaskAC = (todolistID: string, taskTitle: string): AddTaskACType => {\n    return {\n        type: ADD_TASK,\n        todolistID,\n        taskTitle\n    }\n}\n\ntype RenameTaskACType = { type: typeof RENAME_TASK, todolistID: string, taskID: string, newName: string }\nexport const renameTaskAC = (todolistID: string, taskID: string, newName: string): RenameTaskACType => {\n    return {\n        type: RENAME_TASK,\n        todolistID,\n        taskID,\n        newName\n    }\n}\ntype ChangeDoneTaskACType = {type: typeof CHANGE_DONE, todolistID:string,taskID:string,valueDone:boolean}\nexport const changeDoneTaskAC = (todolistID:string,taskID:string,valueDone:boolean):ChangeDoneTaskACType => {\n  return{\n      type: CHANGE_DONE,\n      todolistID,\n      taskID,\n      valueDone\n  }\n}\ntype ChangeFilterTodoAC = {type: typeof CHANGE_FILTER, todolistID:string, filter:filterValuesType}\nexport const changeFilterTodoAC = (todolistID:string,filter:filterValuesType):ChangeFilterTodoAC => {\n  return{\n      type: CHANGE_FILTER,\n      todolistID,\n      filter\n  }\n}\n\n\nexport let store = createStore(todolistReducer)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/todolist-reducer\";\nimport {CssBaseline} from \"@material-ui/core\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <CssBaseline />\n    <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}