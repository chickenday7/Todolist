{"version":3,"sources":["component/AddItemForm/ChangeNameForm.tsx","component/ListTasks/ListTasks.tsx","component/AddItemForm/AddItemForm.tsx","component/TodoList.tsx","App.tsx","serviceWorker.ts","state/todolist-reducer.ts","index.tsx"],"names":["ChangeNameForm","props","useState","name","setName","value","onChange","e","currentTarget","onBlur","callback","setChangeMode","onKeyPress","key","ListTasksMap","changeMod","tasks","id","type","checked","isDone","onClick","switchDone","todolistID","text","renameTask","title","deleteTasks","AddItemForm","addSymbol","symbol","TodoList","listTasks","map","elem","ListTasks","onSetFilter","changeFilter","renameTodolist","removeTodolist","addTask","App","todolistID1","uuid_v4","todolistID2","filter","todoList","setTodoList","setTasks","useEffect","prevTasks","localStorage","getItem","prevTodoList","JSON","parse","setItem","stringify","newArrayTodolists","item","keyTodolis","newTodolist","keyTodolist","taskID","task","filterValue","newTodoList","AllTodoLists","filteredTasks","className","titleTodoList","idNewTodo","Boolean","window","location","hostname","match","initialState","todo","store","createStore","state","action","nameTask","newName","todoListID","el","taskTitle","valueDone","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAQaA,G,MAAiB,SAACC,GAC3B,MAAqBC,mBAAiB,IAAtC,mBAAKC,EAAL,KAAUC,EAAV,KAaA,OAAO,2BAAOC,MAAOF,EACPG,SAJO,SAACC,GACpBH,EAAQG,EAAEC,cAAcH,QAIZI,OAVS,WACnBR,EAAMS,SAASP,GACfF,EAAMU,eAAc,IASVC,WAfQ,SAACL,GACT,UAAVA,EAAEM,KAAmBZ,EAAMS,SAASP,GAC1B,UAAVI,EAAEM,KAAmBZ,EAAMU,eAAc,QC6BlCG,EA5BM,SAACb,GAClB,MAAmCC,oBAAkB,GAArD,mBAAOa,EAAP,KAAkBJ,EAAlB,KAcA,OACI,wBAAIE,IAAKZ,EAAMe,MAAMC,IACjB,2BAAOC,KAAK,WAAWC,QAASlB,EAAMe,MAAMI,OAAQC,QAZvC,SAACd,GAClBN,EAAMqB,WAAWrB,EAAMsB,WAAYtB,EAAMe,MAAMC,GAAIV,EAAEC,cAAcW,YAY9DJ,EACK,kBAAC,EAAD,CAAgBL,SAXX,SAACc,GAChBvB,EAAMwB,WAAWxB,EAAMsB,WAAWtB,EAAMe,MAAMC,GAAGO,IAUDb,cAAeA,IACrD,0BAAMU,QATA,WAChBV,GAAc,KAQyBV,EAAMe,MAAMU,OAE/C,4BAAQL,QApBK,WACjBpB,EAAM0B,YAAY1B,EAAMsB,WAAWtB,EAAMe,MAAMC,MAmB3C,OC7BCW,EAAc,SAAC3B,GAExB,MAAsBC,mBAAiB,IAAvC,mBAAKC,EAAL,KAAWC,EAAX,KAOMyB,EAAY,SAACC,GACf1B,EAAQ0B,IAMZ,OACI,6BACI,2BAAOlB,WANM,SAACL,GACV,UAAVA,EAAEM,KAAmBZ,EAAMS,SAASP,IAKGE,MAAOF,EAAMG,SAfhC,SAACC,GACnBsB,EAAUtB,EAAEC,cAAcH,UAetB,4BAAQgB,QAbE,WACVpB,EAAMS,SAASP,KAYf,OC6CG4B,EAnDE,SAAC9B,GAEd,MAAmCC,oBAAkB,GAArD,mBAAOa,EAAP,KAAkBJ,EAAlB,KAEIqB,EAAuB/B,EAAMe,MAAMiB,KAAI,SAACC,GAAD,OAAU,kBAACC,EAAD,CAAcnB,MAAOkB,EACPX,WAAYtB,EAAMsB,WAClBV,IAAKqB,EAAKjB,GACVU,YAAa1B,EAAM0B,YACnBL,WAAYrB,EAAMqB,WAClBG,WAAYxB,EAAMwB,gBAK/EW,EAAc,SAAC7B,GACjBN,EAAMoC,aAAa9B,EAAEC,cAAcL,KAA0BF,EAAMsB,aAcvE,OACI,6BACKR,EACK,kBAAC,EAAD,CAAgBJ,cAAeA,EAAeD,SANzC,SAACc,GAChBvB,EAAMqC,eAAed,EAAMvB,EAAMsB,eAMvB,wBAAIF,QAVE,WAChBV,GAAc,KASuBV,EAAMyB,MAC/B,4BAAQL,QAjBC,WACrBpB,EAAMsC,eAAetC,EAAMsB,cAgBf,MAGR,kBAAC,EAAD,CAAab,SAjBL,SAACc,GACbvB,EAAMuC,QAAQhB,EAAMvB,EAAMsB,eAkBtB,4BACKS,GAEL,6BACI,4BAAQ7B,KAAM,MAAOkB,QAASe,GAA9B,OACA,4BAAQjC,KAAM,SAAUkB,QAASe,GAAjC,UACA,4BAAQjC,KAAM,YAAakB,QAASe,GAApC,gB,OC+DDK,MAhHf,WAAgB,IAAD,EACPC,EAAsBC,eACtBC,EAAsBD,eAG1B,EAA8BzC,mBAAuB,CACjD,CAACe,GAAIyB,EAAahB,MAAO,iBAAkBmB,OAAQ,OACnD,CAAC5B,GAAI2B,EAAalB,MAAO,eAAgBmB,OAAQ,SAFrD,mBAAKC,EAAL,KAAeC,EAAf,KAKA,EAAwB7C,oBAAQ,mBACvBwC,EAAc,CACX,CAACzB,GAAI0B,eAAWjB,MAAO,QAASN,QAAQ,GACxC,CAACH,GAAI0B,eAAWjB,MAAO,KAAMN,QAAQ,GACrC,CAACH,GAAI0B,eAAWjB,MAAO,OAAQN,QAAQ,GACvC,CAACH,GAAI0B,eAAWjB,MAAO,MAAON,QAAQ,KALlB,cAOvBwB,EAAc,CACX,CAAC3B,GAAI0B,eAAWjB,MAAO,OAAQN,QAAQ,GACvC,CAACH,GAAI0B,eAAWjB,MAAO,QAASN,QAAQ,GACxC,CAACH,GAAI0B,eAAWjB,MAAO,MAAON,QAAQ,GACtC,CAACH,GAAI0B,eAAWjB,MAAO,YAAaN,QAAQ,KAXxB,IAAhC,mBAAKJ,EAAL,KAAYgC,EAAZ,KAeAC,qBAAU,WACN,IAAIC,EAAYC,aAAaC,QAAQ,SACjCC,EAAeF,aAAaC,QAAQ,YACpCF,GACAF,EAASM,KAAKC,MAAML,IAEpBG,GACAN,EAAYO,KAAKC,MAAMF,MAE5B,IACHJ,qBAAU,WACNE,aAAaK,QAAQ,QAASF,KAAKG,UAAUzC,IAC7CmC,aAAaK,QAAQ,WAAYF,KAAKG,UAAUX,MACjD,CAAC9B,EAAO8B,IAGX,IAMIP,EAAiB,SAAChB,GAClB,IAAImC,EAAoBZ,EAASD,QAAO,SAAAc,GAAI,OAAIA,EAAK1C,KAAOM,KAC5DwB,EAAYW,UACL1C,EAAMO,GACbyB,EAAS,eAAIhC,KAEbsB,EAAiB,SAACd,EAAcoC,GAChC,IAAIC,EAAcf,EAASb,KAAI,SAAA0B,GAAI,OAAIA,EAAK1C,KAAO2C,EAAZ,2BAA6BD,GAA7B,IAAmCjC,MAAOF,IAAQmC,KACzFZ,EAAYc,IAEZlC,EAAc,SAACmC,EAAqBC,GACpC/C,EAAM8C,GAAe9C,EAAM8C,GAAajB,QAAO,SAAAmB,GAAI,OAAIA,EAAK/C,KAAO8C,KACnEf,EAAS,eAAIhC,KAEbwB,EAAU,SAAChB,EAAcsC,GACzB9C,EAAM8C,GAAN,sBAAyB9C,EAAM8C,IAA/B,CAA6C,CAAC7C,GAAI0B,eAAWjB,MAAOF,EAAMJ,QAAQ,KAClF4B,EAAS,eAAIhC,KAEbS,EAAa,SAACF,EAAkBwC,EAAcvC,GAC9CR,EAAMO,GAAcP,EAAMO,GAAYU,KAAI,SAAA+B,GAAI,OAAIA,EAAK/C,KAAO8C,EAAZ,2BAAyBC,GAAzB,IAA8BtC,MAAMF,IAAMwC,KAC5FhB,EAAS,eAAIhC,KAEbM,EAAa,SAACwC,EAAqBC,EAAgB3C,GACnDJ,EAAM8C,GAAe9C,EAAM8C,GAAa7B,KAAI,SAAA+B,GAAI,OAAIA,EAAK/C,KAAO8C,EAAZ,2BAAyBC,GAAzB,IAA+B5C,WAAU4C,KAC7FhB,EAAS,eAAIhC,KAEbqB,EAAe,SAAC4B,EAA+B1C,GAC/C,IAAI2C,EAAcpB,EAASb,KAAI,SAAA0B,GAAI,OAAIA,EAAK1C,KAAOM,EAAZ,2BAA6BoC,GAA7B,IAAmCd,OAAQoB,IAAeN,KACjGZ,EAAYmB,IAIZC,EAAerB,EAASb,KAAI,SAAC0B,GAC7B,IAAIS,EAAgBpD,EAAM2C,EAAK1C,IAS/B,MARoB,cAAhB0C,EAAKd,SACLuB,EAAgBA,EAAcvB,QAAO,SAACmB,GAAD,OAAeA,EAAK5C,WAEzC,WAAhBuC,EAAKd,SACLuB,EAAgBA,EAAcvB,QAAO,SAACmB,GAAD,OAAgBA,EAAK5C,WAIvD,kBAAC,EAAD,CACHP,IAAK8C,EAAK1C,GACVM,WAAYoC,EAAK1C,GACjBS,MAAOiC,EAAKjC,MACZV,MAAOoD,EACPzC,YAAaA,EACbU,aAAcA,EACdG,QAASA,EACTlB,WAAYA,EACZiB,eAAgBA,EAChBD,eAAgBA,EAChBb,WAAYA,OAIpB,OACI,yBAAK4C,UAAU,OACX,kBAAC,EAAD,CAAa3D,SAjEH,SAAC4D,GACf,IAAIC,EAAY5B,eAChBI,EAAY,CAAC,CAAC9B,GAAIsD,EAAW7C,MAAO4C,EAAezB,OAAQ,QAAhD,mBAA2DC,KACtE9B,EAAMuD,GAAa,GACnBvB,EAAS,eAAIhC,OA8DRmD,IC9GOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCJFlC,EAAcC,eACdC,EAAcD,eASZkC,EAA0B,CAC5BC,KAAM,CACF,CAAC7D,GAAIyB,EAAahB,MAAO,iBAAkBmB,OAAQ,OACnD,CAAC5B,GAAI2B,EAAalB,MAAO,eAAgBmB,OAAQ,QAErD7B,OAAK,mBACA0B,EAAc,CACX,CAACzB,GAAI0B,eAAWjB,MAAO,QAASN,QAAQ,GACxC,CAACH,GAAI0B,eAAWjB,MAAO,KAAMN,QAAQ,GACrC,CAACH,GAAI0B,eAAWjB,MAAO,OAAQN,QAAQ,GACvC,CAACH,GAAI0B,eAAWjB,MAAO,MAAON,QAAQ,KALzC,cAOAwB,EAAc,CACX,CAAC3B,GAAI0B,eAAWjB,MAAO,OAAQN,QAAQ,GACvC,CAACH,GAAI0B,eAAWjB,MAAO,QAASN,QAAQ,GACxC,CAACH,GAAI0B,eAAWjB,MAAO,MAAON,QAAQ,GACtC,CAACH,GAAI0B,eAAWjB,MAAO,YAAaN,QAAQ,KAX/C,IAyJE2D,EAAQC,aAjIY,WAA0D,IAAzDC,EAAwD,uDAAhDJ,EAAcK,EAAkC,uCACpF,OAAQA,EAAOhE,MACX,IAnDS,WAoDL,IAAID,EAAK0B,eACT,OAAO,2BACAsC,GADP,IAEIH,KAAK,CAAE,CAAC7D,GAAIA,EAAIS,MAAOwD,EAAOC,SAAUtC,OAAQ,QAA5C,mBAAuDoC,EAAMH,OACjE9D,MAAM,2BACCiE,EAAMjE,OADR,kBAEAC,EAAK,OAGlB,IA3DY,cA4DR,OAAO,2BACAgE,GADP,IAEIH,KAAMG,EAAMH,KAAK7C,KAAI,SAAAC,GAAI,OAAIA,EAAKjB,KAAOiE,EAAOjE,GAAnB,2BAA4BiB,GAA5B,IAAkCR,MAAOwD,EAAOE,UAAWlD,OAEhG,IAjEY,cAmER,cADO+C,EAAMjE,MAAMkE,EAAOjE,IACnB,2BACAgE,GADP,IAEIH,KAAMG,EAAMH,KAAKjC,QAAO,SAAAX,GAAI,OAAIA,EAAKjB,KAAOiE,EAAOjE,MACnDD,MAAM,eAAKiE,EAAMjE,SAEzB,IAtEY,cAwER,OADAiE,EAAMjE,MAAMkE,EAAOG,YAAcJ,EAAMjE,MAAMkE,EAAOG,YAAYxC,QAAO,SAAAyC,GAAE,OAAIA,EAAGrE,KAAOiE,EAAOnB,UACvF,eACAkB,GAEX,IA1ES,WAgFL,OALAA,EAAMjE,MAAMkE,EAAO3D,YAAnB,CAAkC,CAC9BN,GAAI0B,eACJjB,MAAOwD,EAAOK,UACdnE,QAAQ,IAHZ,mBAIM6D,EAAMjE,MAAMkE,EAAO3D,cAClB,eACA0D,GAEX,IAlFY,cAoFR,OADAA,EAAMjE,MAAMkE,EAAO3D,YAAc0D,EAAMjE,MAAMkE,EAAO3D,YAAYU,KAAI,SAAAqD,GAAE,OAAIA,EAAGrE,KAAOiE,EAAOnB,OAAjB,2BAA8BuB,GAA9B,IAAiC5D,MAAMwD,EAAOE,UAAWE,KAC5H,eACAL,GAEX,IAtFY,cAwFR,OADAA,EAAMjE,MAAMkE,EAAO3D,YAAc0D,EAAMjE,MAAMkE,EAAO3D,YAAYU,KAAI,SAAAqD,GAAE,OAAIA,EAAGrE,KAAOiE,EAAOnB,OAAjB,2BAA8BuB,GAA9B,IAAiClE,QAAQ8D,EAAOM,YAAaF,KAChI,eACAL,GAEX,IA1Fc,gBA2FV,OAAO,2BACAA,GADP,IAEIH,KAAMG,EAAMH,KAAK7C,KAAI,SAAAqD,GAAE,OAAIA,EAAGrE,KAAOiE,EAAO3D,WAAjB,2BAAkC+D,GAAlC,IAAsCzC,OAAOqC,EAAOrC,SAASyC,OAEhG,QACI,OAAOL,MCnGnBQ,IAASC,OACL,kBAAC,IAAD,CAAUX,MAAOA,GACjB,kBAAC,EAAD,OAEAY,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c49786c.chunk.js","sourcesContent":["import React, {Dispatch, SetStateAction, useState} from \"react\";\n\n\n\ntype ChangeNameFormType = {\n    callback:(titleName:string)=>void\n    setChangeMode:Dispatch<SetStateAction<boolean>>\n}\nexport const ChangeNameForm = (props:ChangeNameFormType) => {\n    let [name,setName] = useState<string>('')\n    const onSpanModeKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.key === 'Enter' && props.callback(name)\n        e.key === 'Enter' && props.setChangeMode(false)\n    }\n    const onSpanModeBlur = () => {\n        props.callback(name)\n        props.setChangeMode(false)\n\n    }\n    const onChangeName = (e:React.ChangeEvent<HTMLInputElement>) => {\n      setName(e.currentTarget.value)\n    }\n    return <input value={name}\n                  onChange={onChangeName}\n                  onBlur={onSpanModeBlur}\n                  onKeyPress={onSpanModeKey}\n    />\n}","import React, {useState} from \"react\";\nimport {TasksType} from \"../../App\";\nimport {ChangeNameForm} from \"../AddItemForm/ChangeNameForm\";\n\n\ntype ListTasks = {\n    todolistID:string\n    tasks: TasksType\n    deleteTasks: (keyTask:string,taskID:string) => void\n    switchDone: (keyTask:string, taskID:string, done:boolean) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\n\nconst ListTasksMap = (props: ListTasks) => {\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n    const onDeleteTask = () => {\n        props.deleteTasks(props.todolistID,props.tasks.id)\n    }\n    const onSwitchDone = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n        props.switchDone(props.todolistID, props.tasks.id, e.currentTarget.checked)\n    }\n    const renameTask = (text:string) => {\n        props.renameTask(props.todolistID,props.tasks.id,text)\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n\n    return (\n        <li key={props.tasks.id}>\n            <input type=\"checkbox\" checked={props.tasks.isDone} onClick={onSwitchDone}/>\n            {changeMod\n                ? <ChangeNameForm callback={renameTask} setChangeMode={setChangeMode} />\n                : <span onClick={onInputMode}>{props.tasks.title}</span>\n            }\n            <button onClick={onDeleteTask}>x\n            </button>\n        </li>\n    )\n}\n\nexport default ListTasksMap","import React, {ChangeEvent, useState} from \"react\";\n\n\ntype AddItemFormType = {\n    callback:(text:string)=>void\n}\nexport const AddItemForm = (props:AddItemFormType) => {\n\n    let [name, setName] = useState<string>('')\n    const onChangeInput = (e:ChangeEvent<HTMLInputElement>) => {\n        addSymbol(e.currentTarget.value)\n    }\n    const onAddItem = () => {\n            props.callback(name)\n    }\n    const addSymbol = (symbol: string) => {\n        setName(symbol)\n    }\n    const onAddItemKey = (e:React.KeyboardEvent<HTMLInputElement>) => {\n      e.key === 'Enter' && props.callback(name)\n    }\n\n    return(\n        <div>\n            <input onKeyPress={onAddItemKey} value={name} onChange={onChangeInput} />\n            <button onClick={onAddItem}>+</button>\n        </div>\n    )\n}","import React, {MouseEvent, ReactNode, useState} from \"react\";\nimport {filterValuesType, TasksType} from \"../App\";\nimport ListTasksMap from \"./ListTasks/ListTasks\";\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\nimport {ChangeNameForm} from \"./AddItemForm/ChangeNameForm\";\n\n\ntype TodoListProps = {\n    todolistID: string\n    title: string\n    tasks: Array<TasksType>\n    deleteTasks: (keyTask: string, taskID: string) => void\n    changeFilter: (filterValue: filterValuesType, todolistID: string) => void\n    addTask: (text: string, keyTask: string) => void\n    switchDone: (keyTask: string, taskID: string, done: boolean) => void\n    removeTodolist: (todolistID: string) => void\n    renameTodolist: (text: string, keyTodolist: string) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\nconst TodoList = (props: TodoListProps) => {\n\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n\n    let listTasks: ReactNode = props.tasks.map((elem) => <ListTasksMap tasks={elem}\n                                                                       todolistID={props.todolistID}\n                                                                       key={elem.id}\n                                                                       deleteTasks={props.deleteTasks}\n                                                                       switchDone={props.switchDone}\n                                                                       renameTask={props.renameTask}\n\n\n\n    />)\n    const onSetFilter = (e: MouseEvent<HTMLButtonElement>) => {\n        props.changeFilter(e.currentTarget.name as filterValuesType, props.todolistID)\n    }\n    const onRemoveTodolist = () => {\n        props.removeTodolist(props.todolistID)\n    }\n    const addTask = (text: string) => {\n        props.addTask(text, props.todolistID)\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n    const renameTask = (text: string) => {\n        props.renameTodolist(text, props.todolistID)\n    }\n    return (\n        <div>\n            {changeMod\n                ? <ChangeNameForm setChangeMode={setChangeMode} callback={renameTask}/>\n                : <h3 onClick={onInputMode}>{props.title}\n                    <button onClick={onRemoveTodolist}>X</button>\n                </h3>\n            }\n            <AddItemForm callback={addTask}\n            />\n            <ul>\n                {listTasks}\n            </ul>\n            <div>\n                <button name={'all'} onClick={onSetFilter}>All</button>\n                <button name={'active'} onClick={onSetFilter}>Active</button>\n                <button name={'completed'} onClick={onSetFilter}>Completed</button>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport TodoList from \"./component/TodoList\";\nimport {v4 as uuid_v4} from \"uuid\";\nimport {AddItemForm} from \"./component/AddItemForm/AddItemForm\";\n\n\nexport type filterValuesType = 'all' | 'completed' | 'active'\n\nexport type TasksType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    let todolistID1: string = uuid_v4()\n    let todolistID2: string = uuid_v4()\n\n    type TodoListType = Array<{ id: string, title: string, filter: filterValuesType }>\n    let [todoList, setTodoList] = useState<TodoListType>([\n        {id: todolistID1, title: 'What to learn?', filter: 'all'},\n        {id: todolistID2, title: 'What to buy?', filter: 'all'},\n    ])\n\n    let [tasks, setTasks] = useState({\n            [todolistID1]: [\n                {id: uuid_v4(), title: 'React', isDone: true},\n                {id: uuid_v4(), title: 'JS', isDone: false},\n                {id: uuid_v4(), title: 'HTML', isDone: true},\n                {id: uuid_v4(), title: 'CSS', isDone: true},\n            ],\n            [todolistID2]: [\n                {id: uuid_v4(), title: 'Milk', isDone: true},\n                {id: uuid_v4(), title: 'Bread', isDone: false},\n                {id: uuid_v4(), title: 'Egg', isDone: true},\n                {id: uuid_v4(), title: 'Chocolate', isDone: true},]\n        }\n    )\n\n    useEffect(() => {\n        let prevTasks = localStorage.getItem('tasks')\n        let prevTodoList = localStorage.getItem('todolist')\n        if (prevTasks) {\n            setTasks(JSON.parse(prevTasks))\n        }\n        if (prevTodoList) {\n            setTodoList(JSON.parse(prevTodoList))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n        localStorage.setItem('todolist', JSON.stringify(todoList))\n    }, [tasks, todoList])\n\n\n    let addTodoList = (titleTodoList: string) => {\n        let idNewTodo = uuid_v4()\n        setTodoList([{id: idNewTodo, title: titleTodoList, filter: 'all'}, ...todoList])\n        tasks[idNewTodo] = []\n        setTasks({...tasks})\n    }\n    let removeTodolist = (todolistID: string) => {\n        let newArrayTodolists = todoList.filter(item => item.id !== todolistID)\n        setTodoList(newArrayTodolists)\n        delete tasks[todolistID]\n        setTasks({...tasks})\n    }\n    let renameTodolist = (text: string, keyTodolis: string): void => {\n        let newTodolist = todoList.map(item => item.id === keyTodolis ? {...item, title: text} : item)\n        setTodoList(newTodolist)\n    }\n    let deleteTasks = (keyTodolist: string, taskID: string): void => {\n        tasks[keyTodolist] = tasks[keyTodolist].filter(task => task.id !== taskID)\n        setTasks({...tasks})\n    }\n    let addTask = (text: string, keyTodolist: string): void => {\n        tasks[keyTodolist] = [...tasks[keyTodolist], {id: uuid_v4(), title: text, isDone: false}]\n        setTasks({...tasks})\n    }\n    let renameTask = (todolistID:string,taskID:string,text:string)=>{\n        tasks[todolistID] = tasks[todolistID].map(task => task.id === taskID ? {...task,title:text}:task)\n        setTasks({...tasks})\n    }\n    let switchDone = (keyTodolist: string, taskID: string, isDone: boolean) => {\n        tasks[keyTodolist] = tasks[keyTodolist].map(task => task.id === taskID ? {...task, isDone} : task)\n        setTasks({...tasks})\n    }\n    let changeFilter = (filterValue: filterValuesType, todolistID: string) => {\n        let newTodoList = todoList.map(item => item.id === todolistID ? {...item, filter: filterValue} : item)\n        setTodoList(newTodoList)\n    }\n\n\n    let AllTodoLists = todoList.map((item) => {\n        let filteredTasks = tasks[item.id]\n        if (item.filter === 'completed') {\n            filteredTasks = filteredTasks.filter((task: any) => task.isDone)\n        }\n        if (item.filter === 'active') {\n            filteredTasks = filteredTasks.filter((task: any) => !task.isDone)\n        }\n\n\n        return <TodoList\n            key={item.id}\n            todolistID={item.id}\n            title={item.title}\n            tasks={filteredTasks}\n            deleteTasks={deleteTasks}\n            changeFilter={changeFilter}\n            addTask={addTask}\n            switchDone={switchDone}\n            removeTodolist={removeTodolist}\n            renameTodolist={renameTodolist}\n            renameTask={renameTask}\n        />\n    })\n\n    return (\n        <div className=\"App\">\n            <AddItemForm callback={addTodoList}/>\n            {AllTodoLists}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\nimport {v4 as uuid_v4} from \"uuid\";\nimport {filterValuesType} from \"../App\";\n\nconst ADD_TODO = 'ADD_TODO'\nconst REMOVE_TODO = 'REMOVE_TODO'\nconst RENAME_TODO = 'RENAME_TODO'\nconst DELETE_TASK = 'DELETE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst RENAME_TASK = 'RENAME_TASK'\nconst CHANGE_DONE = 'CHANGE_DONE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\n\n\nlet todolistID1 = uuid_v4()\nlet todolistID2 = uuid_v4()\n\nexport type StateType = {\n    todo: { id: string, title: string, filter: filterValuesType }[]\n    tasks: {\n        [key: string]: { id: string, title: string, isDone: boolean }[]\n    }\n}\n\nconst initialState: StateType = {\n    todo: [\n        {id: todolistID1, title: 'What to learn?', filter: 'all'},\n        {id: todolistID2, title: 'What to buy?', filter: 'all'},\n    ],\n    tasks: {\n        [todolistID1]: [\n            {id: uuid_v4(), title: 'React', isDone: true},\n            {id: uuid_v4(), title: 'JS', isDone: false},\n            {id: uuid_v4(), title: 'HTML', isDone: true},\n            {id: uuid_v4(), title: 'CSS', isDone: true},\n        ],\n        [todolistID2]: [\n            {id: uuid_v4(), title: 'Milk', isDone: true},\n            {id: uuid_v4(), title: 'Bread', isDone: false},\n            {id: uuid_v4(), title: 'Egg', isDone: true},\n            {id: uuid_v4(), title: 'Chocolate', isDone: true},]\n    }\n}\n\ntype ActionType = AddTodoACType |\n    RemoveTodoACType |\n    RenameTodoACType |\n    DeleteTaskACType |\n    AddTaskACType |\n    RenameTaskACType |\n    ChangeDoneTaskACType |\n    ChangeFilterTodoAC\n\nexport const todolistReducer = (state = initialState, action: ActionType): StateType => {\n    switch (action.type) {\n        case ADD_TODO:\n            let id = uuid_v4()\n            return {\n                ...state,\n                todo: [{id: id, title: action.nameTask, filter: 'all'}, ...state.todo],\n                tasks: {\n                    ...state.tasks,\n                    [id]: []\n                }\n            }\n        case RENAME_TODO:\n            return {\n                ...state,\n                todo: state.todo.map(elem => elem.id === action.id ? {...elem, title: action.newName} : elem)\n            }\n        case REMOVE_TODO:\n            delete state.tasks[action.id]\n            return {\n                ...state,\n                todo: state.todo.filter(elem => elem.id !== action.id),\n                tasks: {...state.tasks}\n            }\n        case DELETE_TASK:\n            state.tasks[action.todoListID] = state.tasks[action.todoListID].filter(el => el.id !== action.taskID)\n            return {\n                ...state\n            }\n        case ADD_TASK:\n            state.tasks[action.todolistID] = [{\n                id: uuid_v4(),\n                title: action.taskTitle,\n                isDone: false\n            }, ...state.tasks[action.todolistID]]\n            return {\n                ...state\n            }\n        case RENAME_TASK:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,title:action.newName} : el)\n            return {\n                ...state\n            }\n        case CHANGE_DONE:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,isDone:!action.valueDone} : el)\n            return {\n                ...state\n            }\n        case CHANGE_FILTER:\n            return {\n                ...state,\n                todo: state.todo.map(el => el.id === action.todolistID ? {...el, filter:action.filter}: el)\n            }\n        default:\n            return state\n\n    }\n}\n\n\ntype AddTodoACType = { type: typeof ADD_TODO, nameTask: string }\nexport const addTodoAC = (nameTask: string): AddTodoACType => {\n    return {\n        type: ADD_TODO,\n        nameTask\n    }\n}\n\ntype RemoveTodoACType = { type: typeof REMOVE_TODO, id: string }\nexport const removeTodoAC = (id: string): RemoveTodoACType => {\n    return {\n        type: REMOVE_TODO,\n        id\n    }\n}\n\ntype RenameTodoACType = { type: typeof RENAME_TODO, id: string, newName: string }\nexport const renameTodoAC = (id: string, newName: string): RenameTodoACType => {\n    return {\n        type: RENAME_TODO,\n        id,\n        newName\n    }\n}\ntype DeleteTaskACType = { type: typeof DELETE_TASK, todoListID: string, taskID: string }\nexport const deleteTaskAC = (todoListID: string, taskID: string): DeleteTaskACType => {\n    return {\n        type: DELETE_TASK,\n        todoListID,\n        taskID\n    }\n}\ntype AddTaskACType = { type: typeof ADD_TASK, todolistID: string, taskTitle: string }\nexport const addTaskAC = (todolistID: string, taskTitle: string): AddTaskACType => {\n    return {\n        type: ADD_TASK,\n        todolistID,\n        taskTitle\n    }\n}\n\ntype RenameTaskACType = { type: typeof RENAME_TASK, todolistID: string, taskID: string, newName: string }\nexport const renameTaskAC = (todolistID: string, taskID: string, newName: string): RenameTaskACType => {\n    return {\n        type: RENAME_TASK,\n        todolistID,\n        taskID,\n        newName\n    }\n}\ntype ChangeDoneTaskACType = {type: typeof CHANGE_DONE, todolistID:string,taskID:string,valueDone:boolean}\nexport const changeDoneTaskAC = (todolistID:string,taskID:string,valueDone:boolean):ChangeDoneTaskACType => {\n  return{\n      type: CHANGE_DONE,\n      todolistID,\n      taskID,\n      valueDone\n  }\n}\ntype ChangeFilterTodoAC = {type: typeof CHANGE_FILTER, todolistID:string, filter:filterValuesType}\nexport const changeFilterTodoAC = (todolistID:string,filter:filterValuesType):ChangeFilterTodoAC => {\n  return{\n      type: CHANGE_FILTER,\n      todolistID,\n      filter\n  }\n}\n\n\nexport let store = createStore(todolistReducer)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/todolist-reducer\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}