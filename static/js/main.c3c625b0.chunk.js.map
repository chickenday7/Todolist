{"version":3,"sources":["AppStyle.module.scss","component/Todolist.module.scss","component/ListTasks/ListTasksStyle.module.scss","component/AddItemForm/AddItemFormStyle.module.scss","component/AddItemForm/ChangeNameForm.tsx","component/ListTasks/ListTasks.tsx","component/AddItemForm/AddItemForm.tsx","SuperComponents/Tooltip.ts","component/TodoList.tsx","state/todolist-reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ChangeNameForm","props","useState","name","setName","value","onChange","e","currentTarget","onBlur","callback","setChangeMode","onKeyPress","key","autoFocus","useStyles","makeStyles","theme","createStyles","delete","width","height","cursor","marginLeft","color","ListTasksMap","changeMod","classes","tasks","id","className","s","wrapperItemTask","type","checked","isDone","onClick","switchDone","todolistID","title","text","renameTask","deleteTasks","plus","position","right","bottom","input","padding","AddItemForm","addSymbol","symbol","wrapperAddForm","TextField","label","ChangeNameTooltip","withStyles","tooltip","backgroundColor","palette","common","white","boxShadow","shadows","fontSize","top","Tooltip","DeleteTooltip","display","edit","editActive","TodoList","listTasks","map","elem","ListTasks","hoverFroEdit","setHoverForEdit","onSetFilter","changeFilter","console","log","wrapperTodo","renameTodolist","wrapperNameTodo","placement","titleTodo","onMouseLeave","onMouseOver","removeTodolist","addTask","todolistID1","uuid_v4","todolistID2","initialState","todo","filter","store","createStore","state","action","nameTask","newName","todoListID","el","taskID","taskTitle","valueDone","allTasks","allTodo","applyMiddleware","thunk","compose","connect","dispatch","addTodo","addTodoAC","removeTodo","removeTodoAC","renameTaskAC","deleteTask","deleteTaskAC","addTaskAC","renameTodo","renameTodoAC","changeDoneTask","todolistId","changeDoneTaskAC","changeFilterTodo","changeFilterTodoAC","setTasks","alltasks","setTodos","setTodoAC","useEffect","prevTasks","localStorage","getItem","prevTodoList","JSON","parse","setItem","stringify","AllTodoLists","item","filteredTasks","task","App","wrapperTodolists","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3c625b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"AppStyle_App__jpt-c\",\"wrapperAddForm\":\"AppStyle_wrapperAddForm__2mZV2\",\"wrapperTodolists\":\"AppStyle_wrapperTodolists__3zbf-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"Todolist_buttonDelete__321Uk\",\"titleTodo\":\"Todolist_titleTodo__2H_ug\",\"wrapperNameTodo\":\"Todolist_wrapperNameTodo__1sWWw\",\"wrapperTodo\":\"Todolist_wrapperTodo__D-gDA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperItemTask\":\"ListTasksStyle_wrapperItemTask__2-sI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperAddForm\":\"AddItemFormStyle_wrapperAddForm__SmWsc\"};","import React, {Dispatch, SetStateAction, useState} from \"react\";\n\n\ntype ChangeNameFormType = {\n    callback: (titleName: string) => void\n    setChangeMode: Dispatch<SetStateAction<boolean>>\n    name: string\n}\nexport const ChangeNameForm = (props: ChangeNameFormType) => {\n    let [name, setName] = useState<string>(props.name)\n    const onSpanModeKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        e.key === 'Enter' && props.callback(name)\n        e.key === 'Enter' && props.setChangeMode(false)\n    }\n    const onSpanModeBlur = () => {\n        props.callback(name)\n        props.setChangeMode(false)\n    }\n    const onChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setName(e.currentTarget.value)\n    }\n    return <input value={name}\n                  onChange={onChangeName}\n                  onBlur={onSpanModeBlur}\n                  onKeyPress={onSpanModeKey}\n                  autoFocus={true}\n    />\n}","import React, {useState} from \"react\";\nimport {TaskType} from \"../../App\";\nimport {ChangeNameForm} from \"../AddItemForm/ChangeNameForm\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {createStyles, makeStyles} from \"@material-ui/core\";\nimport s from './ListTasksStyle.module.scss'\n\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        delete:{\n            width:'20px',\n            height:'20px',\n            cursor:'pointer',\n            marginLeft:'auto',\n            '&:hover':{\n                color:'red'\n            }\n        }\n    })\n)\n\n\ntype ListTasks = {\n    todolistID: string\n    tasks: TaskType\n    deleteTasks: (keyTask: string, taskID: string) => void\n    switchDone: (keyTask: string, taskID: string, done: boolean) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\nconst ListTasksMap = (props: ListTasks) => {\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n    const onDeleteTask = () => {\n        props.deleteTasks(props.todolistID, props.tasks.id)\n    }\n    const onSwitchDone = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n        props.switchDone(props.todolistID, props.tasks.id, props.tasks.isDone)\n        debugger\n    }\n    const renameTask = (text: string) => {\n        props.renameTask(props.todolistID, props.tasks.id, text)\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n    const classes = useStyles()\n    return (\n        <li key={props.tasks.id} className={s.wrapperItemTask}>\n            <input type=\"checkbox\" checked={props.tasks.isDone} onClick={onSwitchDone}/>\n            {changeMod\n                ? <ChangeNameForm name={props.tasks.title} callback={renameTask} setChangeMode={setChangeMode}/>\n                : <span onClick={onInputMode}>{props.tasks.title}</span>\n            }\n            <DeleteIcon className={classes.delete} onClick={onDeleteTask}/>\n\n        </li>\n    )\n}\n\nexport default ListTasksMap","import React, {ChangeEvent, useState} from \"react\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport s from './AddItemFormStyle.module.scss'\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\n\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        plus:{\n            color:'black',\n            cursor:'pointer',\n            position:'absolute',\n            right:'0',\n            bottom:'3px',\n            '&:hover': {\n                color:'#2d97e7'\n            }\n        },\n        input:{\n            width:'250px',\n            padding: '12,5px',\n            'input':{\n                padding:'11,5px 14px'\n            }\n        }\n    }),\n)\n\n\ntype AddItemFormType = {\n    callback: (text: string) => void\n    label:string\n}\n\nexport const AddItemForm = (props: AddItemFormType) => {\n\n    let [name, setName] = useState<string>('')\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        addSymbol(e.currentTarget.value)\n    }\n    const onAddItemButton = () => {\n        props.callback(name)\n        setName('')\n    }\n    const addSymbol = (symbol: string) => {\n        setName(symbol)\n    }\n    const onAddItemKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter'){\n            setName('')\n        }\n        e.key === 'Enter' && props.callback(name)\n\n    }\n    const classes = useStyles()\n    return (\n        <div className={s.wrapperAddForm}>\n            <TextField onKeyPress={onAddItemKey} onChange={onChangeInput} value={name} label={`Add ${props.label}`}/>\n            <AddCircleIcon className={classes.plus}  onClick={onAddItemButton}/>\n        </div>\n    )\n}","import {Theme, Tooltip, withStyles} from \"@material-ui/core\";\n\nexport const ChangeNameTooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n        position:'absolute',\n        top: '20px',\n        width:'90px'\n    },\n}))(Tooltip);\n\n\nexport const DeleteTooltip = withStyles((theme)=>({\n    tooltip:{\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n        position:'absolute',\n        top: '-12px',\n        width:'50px',\n        right:'-20px'\n    }\n}))(Tooltip)\n","import React, {MouseEvent, ReactNode, useState} from \"react\";\nimport {filterValuesType, TaskType} from \"../App\";\nimport ListTasksMap from \"./ListTasks/ListTasks\";\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\nimport {ChangeNameForm} from \"./AddItemForm/ChangeNameForm\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport s from './Todolist.module.scss'\nimport {ChangeNameTooltip, DeleteTooltip} from './../SuperComponents/Tooltip'\nimport EditIcon from '@material-ui/icons/Edit';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        delete: {\n            width: '25px',\n            height: '25px',\n            cursor: 'pointer',\n            display:'inline-block',\n            '&:hover': {\n                color: 'red'\n            }\n        },\n        edit:{\n            width: '20px',\n            height: '20px',\n            position:'absolute',\n            right:'-18px',\n            top:'5px',\n            '&:hover':{\n                color:'#2d97e7'\n            }\n        },\n        editActive:{\n            width: '20px',\n            height: '20px',\n            position:'absolute',\n            right:'-18px',\n            top:'5px',\n            color:'#2d97e7'\n        }\n    }),\n)\n\ntype TodoListProps = {\n    todolistID: string\n    title: string\n    tasks: Array<TaskType>\n    deleteTasks: (keyTask: string, taskID: string) => void\n    changeFilter: ( todolistID: string,filterValue: filterValuesType) => void\n    addTask: ( keyTask: string,text: string) => void\n    switchDone: (keyTask: string, taskID: string, done: boolean) => void\n    removeTodolist: (todolistID: string) => void\n    renameTodolist: ( keyTodolist: string,text: string,) => void\n    renameTask: (todolistID: string, taskID: string, text: string) => void\n}\nconst TodoList = (props: TodoListProps) => {\n    const [changeMod, setChangeMode] = useState<boolean>(false)\n    let listTasks: ReactNode = props.tasks.map((elem) => <ListTasksMap tasks={elem}\n                                                                       todolistID={props.todolistID}\n                                                                       key={elem.id}\n                                                                       deleteTasks={props.deleteTasks}\n                                                                       switchDone={props.switchDone}\n                                                                       renameTask={props.renameTask}\n    />)\n\n    const [hoverFroEdit,setHoverForEdit] = useState<boolean>(false)\n\n    const onSetFilter = (e: MouseEvent<HTMLButtonElement>) => {\n        props.changeFilter(props.todolistID,e.currentTarget.name as filterValuesType )\n    }\n    const onRemoveTodolist = () => {\n        props.removeTodolist(props.todolistID)\n    }\n    const addTask = (text: string) => {\n        props.addTask(props.todolistID,text )\n    }\n    const onInputMode = () => {\n        setChangeMode(true)\n    }\n    const renameTask = (text: string) => {\n        props.renameTodolist(props.todolistID, text)\n    }\n    const classes = useStyles();\n    console.log(props)\n    return (\n        <div className={s.wrapperTodo}>\n            {changeMod\n                ? <ChangeNameForm name={props.title} setChangeMode={setChangeMode} callback={renameTask}/>\n                : <div className={s.wrapperNameTodo}>\n                    <ChangeNameTooltip placement={'top-start'} title={'Change name'}>\n                            <h3 className={s.titleTodo} onMouseLeave={()=>{setHoverForEdit(false)}} onMouseOver={()=>{setHoverForEdit(true)}} onClick={onInputMode}>\n                                {props.title}<EditIcon className={hoverFroEdit ? classes.editActive:classes.edit }/>\n                            </h3>\n                    </ChangeNameTooltip>\n                    <DeleteTooltip title=\"Delete\">\n                        <DeleteIcon onClick={onRemoveTodolist} className={classes.delete}/>\n                    </DeleteTooltip>\n                </div>\n            }\n            <AddItemForm label={'Task'} callback={addTask}/>\n            <ul>\n                {listTasks}\n            </ul>\n            <div>\n                <button name={'all'} onClick={onSetFilter}>All</button>\n                <button name={'active'} onClick={onSetFilter}>Active</button>\n                <button name={'completed'} onClick={onSetFilter}>Completed</button>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList","import {applyMiddleware, createStore} from \"redux\";\nimport {v4 as uuid_v4} from \"uuid\";\nimport {filterValuesType, TaskType, TodoListType} from \"../App\";\nimport thunk from \"redux-thunk\";\n\n\nconst ADD_TODO = 'ADD_TODO'\nconst REMOVE_TODO = 'REMOVE_TODO'\nconst RENAME_TODO = 'RENAME_TODO'\nconst DELETE_TASK = 'DELETE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst RENAME_TASK = 'RENAME_TASK'\nconst CHANGE_DONE = 'CHANGE_DONE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\nconst SET_TASKS = 'SET_TASKS'\nconst SET_TODO = 'SET_TODO'\n\n\nlet todolistID1 = uuid_v4()\nlet todolistID2 = uuid_v4()\n\nexport type StateType = {\n    todo: { id: string, title: string, filter: filterValuesType }[]\n    tasks: {\n        [key: string]: { id: string, title: string, isDone: boolean }[]\n    }\n}\n\nconst initialState: StateType = {\n    todo: [\n        {id: todolistID1, title: 'What to learn?', filter: 'all'},\n        {id: todolistID2, title: 'What to buy?', filter: 'all'},\n    ],\n    tasks: {\n        [todolistID1]: [\n            {id: uuid_v4(), title: 'React', isDone: true},\n            {id: uuid_v4(), title: 'JS', isDone: false},\n            {id: uuid_v4(), title: 'HTML', isDone: true},\n            {id: uuid_v4(), title: 'CSS', isDone: true},\n        ],\n        [todolistID2]: [\n            {id: uuid_v4(), title: 'Milk', isDone: true},\n            {id: uuid_v4(), title: 'Bread', isDone: false},\n            {id: uuid_v4(), title: 'Egg', isDone: true},\n            {id: uuid_v4(), title: 'Chocolate', isDone: true},]\n    }\n}\n\nexport type ActionType = AddTodoACType |\n    RemoveTodoACType |\n    RenameTodoACType |\n    DeleteTaskACType |\n    AddTaskACType |\n    RenameTaskACType |\n    ChangeDoneTaskACType |\n    ChangeFilterTodoAC |\n    SetTasksACType |\n    SetTodoACType\n\nexport const todolistReducer = (state = initialState, action: ActionType): StateType => {\n    debugger\n    switch (action.type) {\n        case ADD_TODO:\n            let id = uuid_v4()\n            return {\n                ...state,\n                todo: [{id: id, title: action.nameTask, filter: 'all'}, ...state.todo],\n                tasks: {\n                    ...state.tasks,\n                    [id]: []\n                }\n            }\n        case RENAME_TODO:\n            return {\n                ...state,\n                todo: state.todo.map(elem => elem.id === action.id ? {...elem, title: action.newName} : elem)\n            }\n        case REMOVE_TODO:\n            delete state.tasks[action.id]\n            return {\n                ...state,\n                todo: state.todo.filter(elem => elem.id !== action.id),\n                tasks: {...state.tasks}\n            }\n        case DELETE_TASK:\n            state.tasks[action.todoListID] = state.tasks[action.todoListID].filter(el => el.id !== action.taskID)\n            return {\n                ...state,\n                tasks:{...state.tasks}\n            }\n        case ADD_TASK:\n            state.tasks[action.todolistID] = [{\n                id: uuid_v4(),\n                title: action.taskTitle,\n                isDone: false\n            }, ...state.tasks[action.todolistID]]\n            return {\n                ...state,\n                tasks: {...state.tasks}\n            }\n        case RENAME_TASK:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,title:action.newName} : el)\n            return {\n                ...state,\n                tasks:{...state.tasks}\n            }\n        case CHANGE_DONE:\n            state.tasks[action.todolistID] = state.tasks[action.todolistID].map(el => el.id === action.taskID ? {...el,isDone:!action.valueDone} : el)\n            return {\n                ...state,\n                tasks:{...state.tasks}\n            }\n        case CHANGE_FILTER:\n            return {\n                ...state,\n                todo: state.todo.map(el => el.id === action.todolistID ? {...el, filter:action.filter}: el)\n            }\n        case SET_TASKS:\n            return {\n                ...state,\n                tasks: action.allTasks\n            }\n        case SET_TODO:\n            return {\n                ...state,\n                todo: action.allTodo\n            }\n\n        default:\n            return state\n    }\n}\n\n\ntype AddTodoACType = { type: typeof ADD_TODO, nameTask: string }\nexport const addTodoAC = (nameTask: string): AddTodoACType => {\n    return {\n        type: ADD_TODO,\n        nameTask\n    }\n}\n\ntype RemoveTodoACType = { type: typeof REMOVE_TODO, id: string }\nexport const removeTodoAC = (id: string): RemoveTodoACType => {\n    return {\n        type: REMOVE_TODO,\n        id\n    }\n}\n\ntype RenameTodoACType = { type: typeof RENAME_TODO, id: string, newName: string }\nexport const renameTodoAC = (id: string, newName: string): RenameTodoACType => {\n    return {\n        type: RENAME_TODO,\n        id,\n        newName\n    }\n}\ntype DeleteTaskACType = { type: typeof DELETE_TASK, todoListID: string, taskID: string }\nexport const deleteTaskAC = (todoListID: string, taskID: string): DeleteTaskACType => {\n    return {\n        type: DELETE_TASK,\n        todoListID,\n        taskID\n    }\n}\ntype AddTaskACType = { type: typeof ADD_TASK, todolistID: string, taskTitle: string }\nexport const addTaskAC = (todolistID: string, taskTitle: string): AddTaskACType => {\n    return {\n        type: ADD_TASK,\n        todolistID,\n        taskTitle\n    }\n}\n\ntype RenameTaskACType = { type: typeof RENAME_TASK, todolistID: string, taskID: string, newName: string }\nexport const renameTaskAC = (todolistID: string, taskID: string, newName: string): RenameTaskACType => {\n    return {\n        type: RENAME_TASK,\n        todolistID,\n        taskID,\n        newName\n    }\n}\ntype ChangeDoneTaskACType = {type: typeof CHANGE_DONE, todolistID:string,taskID:string,valueDone:boolean}\nexport const changeDoneTaskAC = (todolistID:string,taskID:string,valueDone:boolean):ChangeDoneTaskACType => {\n  return{\n      type: CHANGE_DONE,\n      todolistID,\n      taskID,\n      valueDone\n  }\n}\ntype ChangeFilterTodoAC = {type: typeof CHANGE_FILTER, todolistID:string, filter:filterValuesType}\nexport const changeFilterTodoAC = (todolistID:string,filter:filterValuesType):ChangeFilterTodoAC => {\n  return{\n      type: CHANGE_FILTER,\n      todolistID,\n      filter\n  }\n}\n\ntype SetTasksACType = {type:typeof SET_TASKS,allTasks:{[key:string]:TaskType[]}}\nexport const setTasksAC = (allTasks:{[key:string]:TaskType[]}):SetTasksACType => {\n  return{\n      type:SET_TASKS,\n      allTasks\n  }\n}\n\ntype SetTodoACType = {type:typeof SET_TODO, allTodo:TodoListType[]}\nexport const setTodoAC = (allTodo:TodoListType[]):SetTodoACType=>{\n    return{\n        type:SET_TODO,\n        allTodo\n    }\n}\n\nexport let store = createStore(todolistReducer,applyMiddleware(thunk))\n","import React, {useEffect} from 'react';\nimport './AppStyle.module.scss';\nimport TodoList from \"./component/TodoList\";\nimport {AddItemForm} from \"./component/AddItemForm/AddItemForm\";\nimport s from './AppStyle.module.scss'\nimport {compose, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskAC,\n    addTodoAC,\n    changeDoneTaskAC,\n    changeFilterTodoAC,\n    deleteTaskAC,\n    removeTodoAC,\n    renameTaskAC,\n    renameTodoAC,\n    setTasksAC,\n    setTodoAC,\n    StateType\n} from \"./state/todolist-reducer\";\n\n\nexport type filterValuesType = 'all' | 'completed' | 'active'\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TodoListType = {\n    id: string,\n    title: string,\n    filter: filterValuesType\n}\n\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nfunction App(props: AppPropsType) {\n\n\n    useEffect(() => {\n        let prevTasks = localStorage.getItem('tasks')\n        let prevTodoList = localStorage.getItem('todolist')\n        if (prevTasks) {\n            props.setTasks(JSON.parse(prevTasks))\n        }\n        if (prevTodoList) {\n            props.setTodos(JSON.parse(prevTodoList))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(props.tasks))\n        localStorage.setItem('todolist', JSON.stringify(props.todo))\n    }, [props.tasks, props.todo])\n\n\n    let AllTodoLists = props.todo.map((item) => {\n        let filteredTasks = props.tasks[item.id]\n        if (item.filter === 'completed') {\n            filteredTasks = filteredTasks.filter((task: TaskType) => task.isDone)\n        }\n        if (item.filter === 'active') {\n            filteredTasks = filteredTasks.filter((task: TaskType) => !task.isDone)\n        }\n\n\n        return <TodoList\n            key={item.id}\n            todolistID={item.id}\n            title={item.title}\n            tasks={filteredTasks}\n            deleteTasks={props.deleteTask}\n            changeFilter={props.changeFilterTodo}\n            addTask={props.addTask}\n            switchDone={props.changeDoneTask}\n            removeTodolist={props.removeTodo}\n            renameTodolist={props.renameTodo}\n            renameTask={props.renameTask}\n        />\n    })\n\n    return (\n        <div className={s.App}>\n            <div className={s.wrapperAddForm}>\n                <AddItemForm label={'Todolist'} callback={props.addTodo}/>\n            </div>\n            <div className={s.wrapperTodolists}>\n                {AllTodoLists}\n            </div>\n\n        </div>\n    );\n}\n\ntype MapStateToPropsType = {\n    todo: TodoListType[],\n    tasks: { [key: string]: TaskType[] }\n}\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\n    return {\n        todo: state.todo,\n        tasks: state.tasks\n    }\n}\n\ntype MapDispatchToPropsType = {\n    addTodo: (nameTask: string) => void\n    removeTodo: (id: string) => void\n    renameTodo: (id: string, newName: string) => void\n    deleteTask: (todoListID: string, taskID: string) => void\n    addTask: (todoListID: string, taskTitle: string) => void\n    renameTask: (todoListID: string, taskID: string, newName: string) => void\n    changeDoneTask: (todolistID: string, taskID: string, valueDone: boolean) => void\n    changeFilterTodo: (todolistID: string, filter: filterValuesType) => void\n    setTasks:(allTasks:{[key:string]:TaskType[]})=>void\n    setTodos:(allTodo:TodoListType[])=>void\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addTodo: (nameTask: string) => {\n            dispatch(addTodoAC(nameTask))\n        },\n        removeTodo: (id: string) => {\n            dispatch(removeTodoAC(id))\n        },\n        renameTask: (todoListID, taskID, newName) => {\n            dispatch(renameTaskAC(todoListID, taskID, newName))\n        },\n        deleteTask: (todoListID, taskID) => {\n            dispatch(deleteTaskAC(todoListID, taskID))\n        },\n        addTask: (todoListID, taskTitle) => {\n            dispatch(addTaskAC(todoListID, taskTitle))\n        },\n        renameTodo: (id, newName) => {\n            dispatch(renameTodoAC(id, newName))\n        },\n        changeDoneTask: (todolistId, taskID, valueDone) => {\n            dispatch(changeDoneTaskAC(todolistId, taskID, valueDone))\n        },\n        changeFilterTodo: (todolistID, filter) => {\n            dispatch(changeFilterTodoAC(todolistID, filter))\n        },\n        setTasks:(alltasks)=>{\n            dispatch(setTasksAC(alltasks))\n        },\n        setTodos:(allTodo:TodoListType[])=>{\n            dispatch(setTodoAC(allTodo))\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps)\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/todolist-reducer\";\nimport {CssBaseline} from \"@material-ui/core\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <CssBaseline />\n    <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}